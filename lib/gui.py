#! /usr/bin/env python3
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.6
#  in conjunction with Tcl version 8.6
#    Apr 23, 2023 08:35:17 PM EDT  platform: Windows NT
import os.path
from tkinter.constants import *
import tkinter.ttk as ttk
import tkinter as tk
import sys
import os
import queue
import imageio
import shutil
import threading
from PIL import Image, ImageTk
_script = sys.argv[0]
_location = os.path.dirname(_script)
# import  #autosave_support
_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40'  # X11 color: #666666
_ana1color = '#c3c3c3'  # Closest X11 color: 'gray76'
_ana2color = 'beige'  # X11 color: #f5f5dc
_tabfg1 = 'black'
_tabfg2 = 'black'
_tabbg1 = 'grey75'
_tabbg2 = 'grey89'
_bgmode = 'light'
_style_code_ran = 0


def _style_code():
    global _style_code_ran
    if _style_code_ran:
        return
    style = ttk.Style()
    if sys.platform == "win32":
        style.theme_use('winnative')
        style.configure('.', background=_bgcolor)
        style.configure('.', foreground=_fgcolor)
        style.configure('.', font='TkDefaultFont')
        style.map('.', background=[
                  ('selected', _compcolor), ('active', _ana2color)])
    if _bgmode == 'dark':
        style.map('.', foreground=[('selected', 'white'), ('active', 'white')])
    else:
        style.map('.', foreground=[('selected', 'black'), ('active', 'black')])
        _style_code_ran = 1


class Toplevel1(tk.Tk):
    def __init__(self, video_path, ImageGenerator, BashScriptRunner,
                 top=None, FRAMES=None, OUTPUT=None,
                 MODEL=None, SCRIPT=None, OUTPUTVIDEOS=None, VIDEO=None):
        '''video player configs'''
        self.video_path = video_path
        self.video = imageio.get_reader(self.video_path)
        # self.image_generator = ImageGenerator(FRAMES, OUTPUT, MODEL)
        self.bashscript_runner = BashScriptRunner(SCRIPT)
        self.frame_gen = self.video.iter_data()
        self.total_frames = self.video.get_length()
        self.current_frame = 0
        self.reset_paths = [FRAMES, OUTPUT, OUTPUTVIDEOS]
        self.frame_queue = queue.Queue()
        self.FRAMES = FRAMES
        self.OUTPUT = OUTPUT
        self.MODEL = MODEL
        self.SCRIPT = SCRIPT
        self.VIDEO = VIDEO
        self.OUTPUTVIDEOS = OUTPUTVIDEOS

        '''This class configures and populates the toplevel window.
        top is the toplevel containing window.'''
        top.geometry("1280x720+433+121")
        top.minsize(120, 1)
        top.maxsize(2198, 1215)
        top.resizable(1,  1)
        top.title("Frame --> Stable Diffusion")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        self.top = top
        _style_code()
        self.TProgressbar1 = ttk.Progressbar(self.top)
        self.TProgressbar1.place(relx=0.008, rely=0.736,
                                 relwidth=0.978, relheight=0.0, height=22)
        self.TProgressbar1.configure(length="1252")
        self.TProgressbar1.configure(value='1')
        self.Message1 = tk.Message(self.top)
        self.Message1.place(relx=0.0, rely=0.778,
                            relheight=0.221, relwidth=1.0)
        self.Message1.configure(background="#000000")
        self.Message1.configure(foreground="#ffff00")
        self.Message1.configure(highlightbackground="#d9d9d9")
        self.Message1.configure(highlightcolor="black")
        self.Message1.configure(padx="1")
        self.Message1.configure(pady="1")
        self.Message1.configure(text='''Message''')
        self.Message1.configure(width=1280)
        self.Canvas1 = tk.Canvas(self.top)
        self.Canvas1.place(relx=0.18, rely=0.014,
                           relheight=0.711, relwidth=0.4)
        self.Canvas1.configure(background="#000000")
        self.Canvas1.configure(borderwidth="2")
        self.Canvas1.configure(highlightbackground="#d9d9d9")
        self.Canvas1.configure(highlightcolor="black")
        self.Canvas1.configure(insertbackground="black")
        self.Canvas1.configure(relief="ridge")
        self.Canvas1.configure(selectbackground="#c4c4c4")
        self.Canvas1.configure(selectforeground="black")
        self.Canvas2 = tk.Canvas(self.top)
        self.Canvas2.place(relx=0.586, rely=0.014,
                           relheight=0.711, relwidth=0.4)
        self.Canvas2.configure(background="#000000")
        self.Canvas2.configure(borderwidth="2")
        self.Canvas2.configure(highlightbackground="#d9d9d9")
        self.Canvas2.configure(highlightcolor="black")
        self.Canvas2.configure(insertbackground="black")
        self.Canvas2.configure(relief="ridge")
        self.Canvas2.configure(selectbackground="#c4c4c4")
        self.Canvas2.configure(selectforeground="black")
        self.TButton1 = ttk.Button(self.top)
        self.TButton1.place(relx=0.023, rely=0.653, height=45, width=176)
        self.TButton1.configure(takefocus="")
        self.TButton1.configure(text='''Make Video''')
        self.TButton1.configure(compound='left')
        self.TButton1.configure(command=self.make_video)
        self.TButton2 = ttk.Button(self.top)
        self.TButton2.place(relx=0.023, rely=0.583, height=45, width=176)
        self.TButton2.configure(takefocus="")
        self.TButton2.configure(text='''Start Video''')
        self.TButton2.configure(compound='left')
        self.TButton2.configure(command=self.update_frame)
        self.Label1 = tk.Label(self.top)
        self.Label1.place(relx=0.016, rely=0.069, height=41, width=86)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(compound='center')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Strength''')
        self.Scale1 = tk.Scale(self.top, from_=0.0, to=1.0, resolution=0.05)
        self.Scale1.place(relx=0.008, rely=0.028,
                          relheight=0.058, relwidth=0.17)
        self.Scale1.configure(activebackground="beige")
        self.Scale1.configure(background="#d9d9d9")
        self.Scale1.configure(foreground="#000000")
        self.Scale1.configure(highlightbackground="#d9d9d9")
        self.Scale1.configure(highlightcolor="black")
        self.Scale1.configure(length="216")
        self.Scale1.configure(orient="horizontal")
        self.Scale1.configure(troughcolor="#d9d9d9")
        self.Scale1.set(0.75)
        self.Scale2 = tk.Scale(self.top, from_=1.0, to=10.0, resolution=0.5)
        self.Scale2.place(relx=0.008, rely=0.125,
                          relheight=0.058, relwidth=0.17)
        self.Scale2.configure(activebackground="beige")
        self.Scale2.configure(background="#d9d9d9")
        self.Scale2.configure(foreground="#000000")
        self.Scale2.configure(highlightbackground="#d9d9d9")
        self.Scale2.configure(highlightcolor="black")
        self.Scale2.configure(length="216")
        self.Scale2.configure(orient="horizontal")
        self.Scale2.configure(troughcolor="#d9d9d9")
        self.Scale2.set(1.5)
        self.Scale3 = tk.Scale(self.top, from_=1, to=150, resolution=1)
        self.Scale3.place(relx=0.008, rely=0.222,
                          relheight=0.058, relwidth=0.17)
        self.Scale3.configure(activebackground="beige")
        self.Scale3.configure(background="#d9d9d9")
        self.Scale3.configure(foreground="#000000")
        self.Scale3.configure(highlightbackground="#d9d9d9")
        self.Scale3.configure(highlightcolor="black")
        self.Scale3.configure(length="218")
        self.Scale3.configure(orient="horizontal")
        self.Scale3.configure(troughcolor="#d9d9d9")
        self.Scale3.set(10)
        self.Label2 = tk.Label(self.top)
        self.Label2.place(relx=0.016, rely=0.181, height=21, width=126)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Guidance Scale''')
        self.Label3 = tk.Label(self.top)
        self.Label3.place(relx=0.016, rely=0.278, height=21, width=145)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Num Inference Steps''')

        self.worker_thread = threading.Thread(
            target=self.save_frames_worker, daemon=True)
        self.worker_thread.start()

    def reset_frames(self):
        for folders in self.reset_paths:
            if os.path.exists(folders):
                shutil.rmtree(folders)
            os.makedirs(folders)

    def update_frame(self):
        try:
            frame = next(self.frame_gen)
            self.current_frame += 1
        except StopIteration:
            # End of video, loop the video.
            self.frame_gen = self.video.iter_data()
            self.current_frame = 0
            self.update_frame()
            return

        # Determine the size of the square crop.
        height, width, _ = frame.shape
        crop_size = min(height, width)

        # Calculate the starting position for the crop.
        start_x = (width - crop_size) // 2
        start_y = (height - crop_size) // 2

        # Crop the frame to a square.
        frame = frame[start_y:start_y + crop_size, start_x:start_x + crop_size]

        # Resize the cropped frame to 512x512 pixels.
        frame = Image.fromarray(frame).resize((512, 512))

        # Put the frame into the queue to be saved by the worker thread.
        self.frame_queue.put((self.current_frame, frame))

        # Convert the frame to a PhotoImage for display in Tkinter.
        image = ImageTk.PhotoImage(frame)

        # Update the label widget with the current frame.
        # self.Canvas1.config(image=image)
        # self.Canvas1.image = image
        self.Canvas1.create_image(0, 0, anchor=tk.NW, image=image)

        # Update the progress bar.
        self.TProgressbar1.configure(value=self.current_frame)


        # Update the window title with the current frame and total frames.
        self.title(
            f"Frame --> Stable Diffusion --> Frame: {self.current_frame} / {self.total_frames}")

        # Schedule the next frame update.
        self.after(20, self.update_frame)

    def save_frames_worker(self):
        while True:
            frame_number, frame = self.frame_queue.get()
            frame_file_path = os.path.join(
                self.FRAMES, f'frame{frame_number:04d}.png')
            imageio.imwrite(frame_file_path, frame)
            self.image_generator.generate_image(
                f'frame{frame_number:04d}.png', self.text_var.get(),
                strength=self.strength_var.get(),
                guidance_scale=self.guidance_var.get(),
                num_inference_steps=self.steps_var.get())
            # t = threading.Thread(target=self.generate_image_thread,
            #                      args=(frame_number,))
            # # Start the thread
            # t.start()

            # Get the latest image from the output folder.
            output_image_path = os.path.join(
                self.OUTPUT, f'frame{frame_number:04d}.png')
            if os.path.exists(output_image_path):
                output_image = Image.open(output_image_path)
                # output_image = output_image.resize((512, 512))
                output_image = ImageTk.PhotoImage(output_image)
                self.panel2.config(image=output_image)
                self.panel2.image = output_image

    def on_closing(self):
        self.video.close()
        self.destroy()

    def make_video(self):
        output = self.bashscript_runner.run_script()
        print(output)

    def delete_output_files(self, dir_path):
        files = os.listdir(dir_path)
        for file in files:
            file_path = os.path.join(dir_path, file)
            os.remove(file_path)

    def generate_image_thread(self, frame_number):
        self.image_generator.generate_image(
            f'frame{frame_number:04d}.png',
            self.text_var.get(),
            strength=self.strength_var.get(),
            guidance_scale=self.guidance_var.get(),
            num_inference_steps=self.steps_var.get())

    def test(self):
        print('hellow world')

    def main(*args):
        '''Main entry point for the application.'''
        global root
        root = tk.Tk()
        root.protocol('WM_DELETE_WINDOW', root.destroy)
        # Creates a toplevel widget.
        global _top1, _w1
        _top1 = root
        _w1 = Toplevel1(_top1)
        _w1.reset_paths()
        sys.stdout = MessageStream(_w1.Message1)
        root.mainloop()


class MessageStream:
    def __init__(self, message_widget):
        self.message_widget = message_widget

    def write(self, message):
        self.message_widget.configure(text=message)

    def flush(self):
        pass


if __name__ == '__main__':
    Toplevel1.main()
